{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// store/index.js\nimport { createStore } from 'vuex';\nconst store = createStore({\n  state: {\n    books: [{\n      id: 1,\n      title: 'Book 1',\n      price: 10\n    }, {\n      id: 2,\n      title: 'Book 2',\n      price: 15\n    }\n    // Add more books here\n    ],\n    cart: [],\n    isAuthenticated: false,\n    user: null,\n    users: [{\n      id: 1,\n      name: 'Administrator',\n      username: 'administrator',\n      password: 'admin123',\n      status: 'verified'\n    }, {\n      id: 2,\n      name: 'Nuela Rabino',\n      username: 'nrabino',\n      password: 'nrabino123',\n      status: 'verified'\n    }, {\n      id: 3,\n      name: 'Harvey Gana',\n      username: 'hgana',\n      password: 'hgana123',\n      status: 'for_verification'\n    }\n    // Add more users here\n    ]\n  },\n  mutations: {\n    addToCart(state, book) {\n      state.cart.push(book);\n    },\n    removeFromCart(state, index) {\n      state.cart.splice(index, 1);\n    },\n    updateAuthenticationStatus(state, status) {\n      state.isAuthenticated = status;\n    },\n    setUser(state, user) {\n      state.user = user;\n    },\n    updateUserStatus(state, {\n      userId,\n      newStatus\n    }) {\n      const userIndex = state.users.findIndex(user => user.id === userId);\n      if (userIndex !== -1) {\n        state.users[userIndex].status = newStatus;\n        // Update the user status in the state\n        state.user = state.users[userIndex];\n        // Call other mutations if needed\n        // commit('setUser', state.user)\n      }\n    }\n  },\n  actions: {\n    purchase({\n      state\n    }) {\n      // Handle purchase transactions asynchronously\n      // Example: Here you can simulate a purchase by updating inventory, deducting amount from user's account, etc.\n    },\n    authenticate({\n      commit,\n      state\n    }, credentials) {\n      // Simulate user authentication and authorization\n      // Example: You can authenticate against a backend API\n      const user = state.users.find(user => user.username === credentials.username && user.password === credentials.password);\n      if (user) {\n        commit('updateAuthenticationStatus', true);\n        commit('setUser', user);\n      }\n    },\n    changeUserStatus({\n      commit\n    }, {\n      userId,\n      newStatus\n    }) {\n      // Perform any necessary verification or validation\n      commit('updateUserStatus', {\n        userId,\n        newStatus\n      });\n    }\n  },\n  getters: {\n    availableBooks: state => state.books,\n    cartItems: state => state.cart,\n    totalPrice: state => state.cart.reduce((total, item) => total + item.price, 0),\n    isAuthenticated: state => state.isAuthenticated,\n    user: state => state.user,\n    userAccounts: state => state.users\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","books","id","title","price","cart","isAuthenticated","user","users","name","username","password","status","mutations","addToCart","book","push","removeFromCart","index","splice","updateAuthenticationStatus","setUser","updateUserStatus","userId","newStatus","userIndex","findIndex","actions","purchase","authenticate","commit","credentials","find","changeUserStatus","getters","availableBooks","cartItems","totalPrice","reduce","total","item","userAccounts"],"sources":["C:/Users/Nuela/midtermact1/src/store/index.js"],"sourcesContent":["// store/index.js\r\nimport { createStore } from 'vuex'\r\n\r\nconst store = createStore({\r\n  state: {\r\n    books: [\r\n      { id: 1, title: 'Book 1', price: 10 },\r\n      { id: 2, title: 'Book 2', price: 15 },\r\n      // Add more books here\r\n    ],\r\n    cart: [],\r\n    isAuthenticated: false,\r\n    user: null,\r\n    users: [\r\n      { id: 1, name: 'Administrator', username: 'administrator', password: 'admin123', status: 'verified' },\r\n      { id: 2, name: 'Nuela Rabino', username: 'nrabino', password: 'nrabino123', status: 'verified' },\r\n      { id: 3, name: 'Harvey Gana', username: 'hgana', password: 'hgana123', status: 'for_verification' }\r\n      // Add more users here\r\n    ]\r\n  },\r\n  mutations: {\r\n    addToCart(state, book) {\r\n      state.cart.push(book)\r\n    },\r\n    removeFromCart(state, index) {\r\n      state.cart.splice(index, 1)\r\n    },\r\n    updateAuthenticationStatus(state, status) {\r\n      state.isAuthenticated = status\r\n    },\r\n    setUser(state, user) {\r\n      state.user = user\r\n    },\r\n    updateUserStatus(state, { userId, newStatus }) {\r\n      const userIndex = state.users.findIndex(user => user.id === userId)\r\n      if (userIndex !== -1) {\r\n        state.users[userIndex].status = newStatus\r\n        // Update the user status in the state\r\n        state.user = state.users[userIndex]\r\n        // Call other mutations if needed\r\n        // commit('setUser', state.user)\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    purchase({ state }) {\r\n      // Handle purchase transactions asynchronously\r\n      // Example: Here you can simulate a purchase by updating inventory, deducting amount from user's account, etc.\r\n    },\r\n    authenticate({ commit, state }, credentials) {\r\n      // Simulate user authentication and authorization\r\n      // Example: You can authenticate against a backend API\r\n      const user = state.users.find(user => user.username === credentials.username && user.password === credentials.password)\r\n      if (user) {\r\n        commit('updateAuthenticationStatus', true)\r\n        commit('setUser', user)\r\n      }\r\n    },\r\n    changeUserStatus({ commit }, { userId, newStatus }) {\r\n      // Perform any necessary verification or validation\r\n      commit('updateUserStatus', { userId, newStatus })\r\n    }\r\n  },\r\n  getters: {\r\n    availableBooks: state => state.books,\r\n    cartItems: state => state.cart,\r\n    totalPrice: state => state.cart.reduce((total, item) => total + item.price, 0),\r\n    isAuthenticated: state => state.isAuthenticated,\r\n    user: state => state.user,\r\n    userAccounts: state => state.users\r\n  }\r\n})\r\n\r\nexport default store\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}